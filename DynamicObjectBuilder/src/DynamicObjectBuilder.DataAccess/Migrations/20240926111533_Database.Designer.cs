// <auto-generated />
using System;
using DynamicObjectBuilder.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicObjectBuilder.DataAccess.Migrations
{
    [DbContext(typeof(SchemaBuilderDbContext))]
    [Migration("20240926111533_Database")]
    partial class Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DynamicObjectBuilder.DataAccess.Models.DynamicEntityModels.DynamicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DynamicEntityId");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DynamicEntity", (string)null);
                });

            modelBuilder.Entity("DynamicObjectBuilder.DataAccess.Models.DynamicSchemaModels.DynamicSchema", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DynamicSchemaId");

                    b.Property<bool>("IsCoreSchema")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DynamicSchemaName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DynamicSchema", (string)null);
                });

            modelBuilder.Entity("DynamicObjectBuilder.DataAccess.Models.DynamicEntityModels.DynamicEntity", b =>
                {
                    b.OwnsMany("DynamicObjectBuilder.DataAccess.Models.DynamicEntityModels.EntityField", "Fields", b1 =>
                        {
                            b1.Property<Guid>("DynamicEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<Guid>("FieldIdentifier")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SchemaTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DynamicEntityId", "Id");

                            b1.ToTable("DynamicEntity");

                            b1.ToJson("Fields");

                            b1.WithOwner()
                                .HasForeignKey("DynamicEntityId");

                            b1.OwnsOne("DynamicObjectBuilder.DataAccess.Models.DynamicEntityModels.FieldValue", "Value", b2 =>
                                {
                                    b2.Property<Guid>("EntityFieldDynamicEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("EntityFieldId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("Boolean")
                                        .HasColumnType("bit");

                                    b2.Property<double?>("Decimal")
                                        .HasColumnType("float");

                                    b2.Property<Guid?>("DynamicEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int?>("Number")
                                        .HasColumnType("int");

                                    b2.Property<string>("Text")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EntityFieldDynamicEntityId", "EntityFieldId");

                                    b2.ToTable("DynamicEntity");

                                    b2.WithOwner()
                                        .HasForeignKey("EntityFieldDynamicEntityId", "EntityFieldId");
                                });

                            b1.Navigation("Value")
                                .IsRequired();
                        });

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("DynamicObjectBuilder.DataAccess.Models.DynamicSchemaModels.DynamicSchema", b =>
                {
                    b.OwnsMany("DynamicObjectBuilder.DataAccess.Models.DynamicSchemaModels.SchemaField", "Fields", b1 =>
                        {
                            b1.Property<Guid>("DynamicSchemaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<Guid>("FieldIdentifier")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("SchemaTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DynamicSchemaId", "Id");

                            b1.ToTable("DynamicSchema");

                            b1.ToJson("Fields");

                            b1.WithOwner()
                                .HasForeignKey("DynamicSchemaId");
                        });

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
